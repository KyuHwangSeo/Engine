Object 최상위 클래스(Interface)

Component (구현 완료)
	-> GameObject
	-> Tag
	-> Enable (해당 컴포넌트 활성화 여부)

GameObject (구현 완료)
	-> Transform : Component
	-> Component List 
		- unordered_multimap, Key 값을 통해 Component 찾기
	-> Update, Render, Picking

Renderer : Component (구현 완료)
	-> Material List
		- unordered_multimap, Key 값을 통해 Material 찾기
	-> Material : Object
		-> Shader : Object (Effect)
			-> Tech... 관련 Data 등등
	-> Mesh

Mesh Renderer : Renderer (구현 완료)


Skinned Mesh Renderer : Renderer (구현 완료)
	-> Transform List (Bone Offset)

Animator : Component (구현 완료)
	-> Animation List
		- unordered_multimap, Key(GameObject) 값을 통해 Animation 찾기
		- GameObject <-> Animation Data (Pair)
	-> Animation
		-> Key Frame Data, Animation TM 등등

 < Animation 문제점 >
   - 현재 키값을 GameObject로 두고 Animation 재생시 GameObject Transform을 Animator Component에서 업데이트 시켜주는데
     Skinning 할 시 BoneList worldTM이 Mesh Data여서 Mesh Data도 업데이트해주어야 하는 것이 문제.. 수정해야 할것 같다..	
      # Bone Transform을 참조하는 방식으로 변경하여 해결

Collider : Component (구현 완료)
	-> 내부에서 자체로 Collider Component만 따로 렌더링 (Debug)
	-> ColBox (Object Buffer Max Size Default)
	-> 충돌 체크는 Tag를 추가하여 이용해보는것도 좋을듯

Rigidbody : Component
	-> Collider List
	-> Collider : Component
	-> 중력, 마찰력, 충돌체크 등등 필요할듯

Material (구현 완료)
	-> StandardShader : Shader (기본 제공 Shader)
	-> DiffuseMap, NormalMap, CubeMap Data ...
	-> 현 Material에 사용되는 Tech를 보유

Camera : Component (구현 완료)
	-> Type을 통한 Camera 종류 구분 (일반, 3인칭, 1인칭)
	-> Main Camera (Global)

Light : Component	(구현 완료)
	-> Type을 통한 Light 종류 구분
	-> 생성과 동시에 기본데이터(Directional, Point, Spot)를 갖고 생성 (변경 가능)

Transform : Componet (구현 완료)
	-> LocalTM, ConvertTM 계층 구조 연결
	-> 애니메이션 뿐만 아니라 움직임이나 추가적인 변환시 연결된 부모의 변환행렬 반영하여 계산

=====================================================================================

Componet 구조 변경 후 해야 할 것들

- ResourceManager 수정
- Factory 추가
- Data Load 방식 변경